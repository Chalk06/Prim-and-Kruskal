#psuedocode, pdf file ref at drive
KRUSKAL(G):
A = âˆ…
For each vertex v âˆˆ G.V:
    MAKE-SET(v)
For each edge (u, v) âˆˆ G.E ordered by increasing order by weight(u, v):
    if FIND-SET(u) â‰  FIND-SET(v):       
    A = A âˆª {(u, v)}
    UNION(u, v)
return A

#other pseudocode

Algorithm Kruskal(G):
Input: A simple connected weighted graph G with n vertices and m edges
Output: A minimum spanning tree T for G
for each vertex v in G do
Define an elementary cluster C(v) = {v}.
Initialize a priority queue Q to contain all edges in G, using the weights as keys.
T = âˆ… {T will ultimately contain the edges of the MST}
while T has fewer than nâˆ’1 edges do
(u,v) = value returned by Q.remove min()
Let C(u) be the cluster containing u, and let C(v) be the cluster containing v.
if C(u) = C(v) then
Add edge (u,v) to T.
Merge C(u) and C(v) into one cluster.
return tree T

# Kruskal's algorithm in Python reference


class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    # Search function

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])

    def apply_union(self, parent, rank, x, y):
        xroot = self.find(parent, x)
        yroot = self.find(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1

    #  Applying Kruskal algorithm
    def kruskal_algo(self):
        result = []
        i, e = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            u, v, w = self.graph[i]
            i = i + 1
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x != y:
                e = e + 1
                result.append([u, v, w])
                self.apply_union(parent, rank, x, y)
        for u, v, weight in result:
            print("%d - %d: %d" % (u, v, weight))
